name: "Terraform Plan/Apply"

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  id-token: write
  contents: read
  pull-requests: write

env:
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  ARM_USE_OIDC: true

jobs:
  terraform-plan:
    name: "Terraform Plan"
    runs-on: ubuntu-latest
    environment: prod
    defaults:
      run:
        working-directory: ./Infra/AppService
    env:
      TF_KEY: 'prod.tfstate'
      TF_VAR_environment: 'prod'
    steps:
      - name: "Checkout"
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: "Terraform Setup"
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: "Terraform Init"
        id: init
        run: terraform init --backend-config="key=$TF_KEY"

      - name: "Terraform Plan"
        run: terraform plan -out=tfplan

      - name: "Terraform Plan Artifact"
        uses: actions/upload-artifact@v3
        with:
          name: tfplan
          path: ./Infra/AppService/tfplan

  terraform-apply:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    environment: prod
    defaults:
      run:
        working-directory: ./Infra/AppService
    needs: [terraform-plan]
    env:
      TF_KEY: 'prod.tfstate'
      TF_VAR_environment: 'prod'
    
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init --backend-config="key=$TF_KEY"

    # Download saved plan from artifacts  
    - name: Download Terraform Plan
      uses: actions/download-artifact@v3
      with:
        name: tfplan
        path: ./Infra/AppService

    # Terraform Apply
    - name: Terraform Apply
      run: terraform apply -auto-approve tfplan

  application_build:
    name: "Build and Push Docker Image"
    runs-on: ubuntu-latest
    needs: [terraform-apply]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 'Az CLI login'
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: 'Registry Login'
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      
      - name: 'Build and Push image'
        working-directory: ./Application
        run: |
          docker build -t ${{ secrets.REGISTRY_LOGIN_SERVER }}/devopsdaysdemo:${{ github.run_number }} .
          docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/devopsdaysdemo:${{ github.run_number }}
    
  application_deploy:
    name: "Application Deploy to App Service"
    runs-on: ubuntu-latest
    needs: [application_build]
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: 'Az CLI login'
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: 'Registry Login'
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Set Web App ACR authentication
        uses: Azure/appservice-settings@v1
        with:
        app-name: 'appservice-dod-demo-prod'
        app-settings-json: |
          [
              {
                  "name": "DOCKER_REGISTRY_SERVER_PASSWORD",
                  "value": "${{ secrets.REGISTRY_PASSWORD }}",
                  "slotSetting": false
              },
              {
                  "name": "DOCKER_REGISTRY_SERVER_URL",
                  "value": "${{ secrets.REGISTRY_LOGIN_SERVER }}",
                  "slotSetting": false
              },
              {
                  "name": "DOCKER_REGISTRY_SERVER_USERNAME",
                  "value": "${{ secrets.REGISTRY_USERNAME  }}",
                  "slotSetting": false
              }
          ]

      - name: 'Deploy to App Service'
        uses: azure/webapps-deploy@v2
        with:
          app-name: 'appservice-dod-demo-prod'
          images: ${{ secrets.REGISTRY_LOGIN_SERVER }}/devopsdaysdemo:${{ github.run_number }}